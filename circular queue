#include <bits/stdc++.h>
using namespace std;

class CircularQueue {
public:
    int *arr;
    int front;
    int rear;
    int size;

    CircularQueue(int size) {
        this->size = size;
        arr = new int[size];
        front = rear = -1;
    }

    void enqueue(int data) {
        // check overflow
        if ((rear + 1) % size == front) {
            cout << "Queue overflow" << endl;
            return;
        }

        if (front == -1) { 
            // first insertion
            front = rear = 0;
        } else {
            rear = (rear + 1) % size;
        }
        arr[rear] = data;
    }

    void dequeue() {
        if (front == -1) {
            cout << "Queue underflow" << endl;
            return;
        }

        cout << "Dequeued: " << arr[front] << endl;

        if (front == rear) {
            // only one element was present
            front = rear = -1;
        } else {
            front = (front + 1) % size;
        }
    }

    int peek() {
        if (front == -1) {
            cout << "Queue is empty" << endl;
            return -1;
        }
        return arr[front];
    }

    bool isEmpty() {
        return front == -1;
    }

    void print() {
        if (front == -1) {
            cout << "Queue is empty" << endl;
            return;
        }
        int i = front;
        while (true) {
            cout << arr[i] << " ";
            if (i == rear) break;
            i = (i + 1) % size;
        }
        cout << endl;
    }
};

int main() {
    CircularQueue q(5); // capacity 5

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);

    q.print(); 

    q.dequeue(); 
    q.dequeue(); 

    q.print();

    q.enqueue(50);
    q.enqueue(60);

    q.print();

    cout << "Front element: " << q.peek() << endl;
    cout << "Is empty? " << (q.isEmpty() ? "Yes" : "No") << endl;

    return 0;
}


