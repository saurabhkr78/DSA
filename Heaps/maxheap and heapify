#include <bits/stdc++.h>
using namespace std;

class heap {
public:
    int arr[100];   // array to store heap elements
    int size;       // current size of heap

    heap() {
        arr[0] = -1;  // dummy value at index 0 (we are using 1-based indexing)
        size = 0;
    }

    // ------------------------- INSERTION -------------------------
    // 1. Place new element at the end of array
    // 2. Move it up (heapify upwards) until heap property is satisfied
    void insert(int val) {
        size++;
        int index = size;
        arr[index] = val;

        // Move up (heapify up)
        while (index > 1) {
            int parent = index / 2;
            if (arr[parent] < arr[index]) {  // max heap: parent should be greater
                swap(arr[parent], arr[index]);
                index = parent;
            } else {
                return;
            }
        }
    }

    // ------------------------- DELETION -------------------------
    // Deletion means removal of the root node (maximum element in max heap).
    // Steps:
    // 1. Put/swap last node of array in place of root node
    // 2. Remove last node (decrease size)
    // 3. Propagate root node down to its correct position (heapify down)
    void dlt(){
        if(size==0){
            cout<<"nothing to delete"<<endl;
            return;
        }

        // put last index into root index
        arr[1] = arr[size];
        // remove last element
        size--;

        // step3: take root node to its correct place (heapify down)
        int i = 1;
        while(i <= size){
            int leftidx = 2*i;
            int rightidx = 2*i+1;
            int largest = i;

            // check bounds and conditions with left and right children
            if(leftidx <= size && arr[leftidx] > arr[largest]){
                largest = leftidx;
            }
            if(rightidx <= size && arr[rightidx] > arr[largest]){
                largest = rightidx;
            }

            if(largest != i){
                swap(arr[i], arr[largest]);
                i = largest; // continue heapifying down
            } else {
                // everything is in correct place
                break;
            }
        }
    }

    // Print heap array
    void print() {
        for (int i = 1; i <= size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }

    // ------------------------- HEAPIFY -------------------------
    // In a complete binary tree, leaf nodes lie from "n/2+1 to n".
    // e.g. for n=5: nodes at positions 3,4,5 are leaves.
    // Leaves are already heaps (single element).
    // So we only need to process nodes from 1 -> n/2 when building a heap.
    //so the heapify function bring the node to the correct position to the given node index to till the last node
    // heapify function:
    // Brings node at index i into correct position by comparing with children
    // and propagating downwards if needed.
    void heapify(int arr[], int size, int i){
        int largest = i;       // assume current node is largest
        int left = 2*i;        // left child index
        int right = 2*i+1;     // right child index

        // if left child exists and is greater than current largest
        if(left <= size && arr[left] > arr[largest]){
            largest = left;
        }
        // if right child exists and is greater than current largest
        if(right <= size && arr[right] > arr[largest]){
            largest = right;
        }
        // if root is not largest, swap and continue heapifying
        if(largest != i){
            swap(arr[i], arr[largest]);
            heapify(arr, size, largest);
        }
    }
};

int main() {
    heap h;

    // ------------------------- INSERTION TEST -------------------------
    h.insert(1);
    h.insert(2);
    h.insert(3);
    h.insert(4);
    h.insert(5);

    h.print();  // prints heap after insertion

    // ------------------------- DELETION TEST -------------------------
    h.dlt();
    h.print();
    h.dlt();
    h.print();

    // ------------------------- HEAPIFY TEST -------------------------
    // Build a heap from existing array
    // Note: using 1-based indexing, so put dummy -1 at index 0
    int arr[6] = {-1, 99, 98, 97, 96, 95};
    int n = 5;

    // process only non-leaf nodes -> from n/2 to 1
    for(int i = n/2; i >= 1; i--){
        h.heapify(arr, n, i);
    }

    cout << "printing the array" << endl;
    for(int i = 1; i <= n; i++){
        cout << arr[i] << " ";
    }
    cout << endl;
}


