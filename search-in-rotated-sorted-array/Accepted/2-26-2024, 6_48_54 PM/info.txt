{"id":1186737322,"question_id":33,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1708953534,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1186737322/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"13.5 MB","code":"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        //finding pivot\n        int n=nums.size();\n        int l=0;\n        int h=n-1;\n        while(l<=h){\n            int mid=l+(h-l)/2;\n            //normal condition\n       if(nums[mid]==target) return mid;\n//2.to check which half is sorted R?L as wehave a sorted array given\n//3. for left search space \n       if(nums[l]<=nums[mid]){\n           //4. if left space is sorted\n           if(nums[l]<=target&&target<nums[mid]) h=mid-1;\n\n           else l=mid+1;\n       }\n       //for right search space\n       else{\n           //if right space is sorted\n           if(nums[mid]<=target&&target<=nums[h]) l=mid+1;\n           else h=mid-1;\n       }\n     \n        }\n  return -1;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1}