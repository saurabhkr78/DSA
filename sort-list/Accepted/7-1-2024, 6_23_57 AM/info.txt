{"id":1305281243,"question_id":148,"lang":"cpp","lang_name":"C++","time":"2 days, 16 hours","timestamp":1719795237,"status":10,"status_display":"Accepted","runtime":"146 ms","url":"/submissions/detail/1305281243/","is_pending":"Not Pending","title":"Sort List","memory":"73.6 MB","code":"class Solution {\npublic:\n    ListNode* mergeLists(ListNode* list1, ListNode* list2) {\n        //farzi node approach\n      ListNode* c=new ListNode(-1);\n      ListNode* temp=c;\n      while(list1!=NULL&&list2!=NULL){\n        if(list1->val<=list2->val){\n            temp->next=list1;\n            list1=list1->next;\n            temp=temp->next;\n        }\n        else{\n            temp->next=list2;\n            list2=list2->next;\n            temp=temp->next;\n        }\n      } \n      if(list1==NULL)temp->next=list2;\n      else temp->next=list1;\n      return c->next;\n    }\n    ListNode* sortList(ListNode* head) {\n        //base case of recursion\n        if(!head || !head->next) return head;\n        //find left middle using fast and slow pointer\n        ListNode* slow=head;\n        ListNode* fast=head;\n        //to find left middle\n        while(fast->next!=NULL && fast->next->next!=NULL){\n            slow=slow->next;\n            fast=fast->next->next;\n        }\n        //now slow is at the left middle now break the list into two halves\n        ListNode* a=head;\n        ListNode* b=slow->next;\n        slow->next=NULL;\n        //sortthe two list\n        a = sortList(a);\n        b = sortList(b);\n        //merge sorted lists\n        ListNode* c = mergeLists(a,b);\n        return c;\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"sort-list","has_notes":false,"flag_type":1}