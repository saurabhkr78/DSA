#include <iostream>
#include <string>

using namespace std;

struct Node {
    string url;
    Node* prev;
    Node* next;

    Node(string u) : url(u), prev(nullptr), next(nullptr) {}
};

class BrowserHistory {
public:
    BrowserHistory(string homepage) {
        head = new Node(homepage);
        curr = head;
    }

    void visit(string url) {
        Node* newNode = new Node(url);
        curr->next = newNode;
        newNode->prev = curr;
        curr = newNode;
        clearForwardHistory(curr);
    }

    void back(int steps) {
        while (curr->prev && steps > 0) {
            curr = curr->prev;
            steps--;
        }
        cout << "Current URL: " << curr->url << endl;
    }

    void forward(int steps) {
        while (curr->next && steps > 0) {
            curr = curr->next;
            steps--;
        }
        cout << "Current URL: " << curr->url << endl;
    }

    string getCurrentPage() {
        return curr->url;
    }

private:
    Node* head;
    Node* curr;

    void clearForwardHistory(Node* node) {
        while (node->next) {
            Node* temp = node->next;
            node->next = temp->next;
            delete temp;
        }
    }
};

int main() {
    BrowserHistory browserHistory("homepage.com");

    browserHistory.visit("page1.com");
    browserHistory.visit("page2.com");
    browserHistory.visit("page3.com");

    browserHistory.back(1);
    browserHistory.back(1);
    browserHistory.forward(1);
    browserHistory.visit("page4.com");
    browserHistory.back(2);
    browserHistory.forward(2);

    return 0;
}