{"id":1219393659,"question_id":74,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1711907776,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1219393659/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"42.4 MB","code":"class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int m = matrix.length;\n        int n = matrix[0].length;\n        int l= 0;\n        int h = m * n - 1;\n\n        while (l <= h) {\n            int mid = l+ (h - l) / 2; //cell no\n\n            int midElement = matrix[mid / n][mid % n];\n\n            if (midElement == target) {\n                return true;\n            } else if (midElement < target) {\n                l = mid + 1;\n            } else {\n                h = mid - 1;\n            }\n        }\n\n        return false;\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix","has_notes":false,"flag_type":1}