{"id":1296147824,"question_id":2722,"lang":"cpp","lang_name":"C++","time":"1 week, 4 days","timestamp":1719022381,"status":10,"status_display":"Accepted","runtime":"71 ms","url":"/submissions/detail/1296147824/","is_pending":"Not Pending","title":"Prime In Diagonal","memory":"38.3 MB","code":"class Solution {\npublic:\n/*A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. In other words, a prime number has exactly two distinct positive divisors: 1 and itself\n\n*/\nbool isPrime(int n) {\n    // Handle numbers less than or equal to 1\n    if (n <= 1) return false;\n    \n    // Handle small prime numbers (2 and 3)\n    if (n <= 3) return true;\n    \n    // Exclude even numbers and multiples of 3\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    // Check for divisors from 5 up to sqrt(n)\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    \n    // If no divisors found, n is prime\n    return true;\n}\n    int diagonalPrime(vector<vector<int>>& nums) {\n        int mx=0;\n        int n=nums.size();\n        for(int i=0;i<n;i++){\n            if(isPrime( nums[i][i])){\n                mx=max(mx,nums[i][i]);\n            }\n            if(isPrime( nums[i][n-i-1])){\n                mx=max(mx,nums[i][n-i-1]);\n            }\n        }\n        return mx;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"prime-in-diagonal","has_notes":false,"flag_type":1}