{"id":1250639385,"question_id":3402,"lang":"cpp","lang_name":"C++","time":"1 month, 4 weeks","timestamp":1714979070,"status":10,"status_display":"Accepted","runtime":"234 ms","url":"/submissions/detail/1250639385/","is_pending":"Not Pending","title":"Minimum Cost to Equalize Array","memory":"92.7 MB","code":"const int64_t mod = 1e9 + 7;\nclass Solution {\npublic:\n    int minCostToEqualizeArray(vector<int>& nums, int cost1, int cost2) {\n        \n        int n = nums.size();\n        int64_t max_a = *max_element(nums.begin(),nums.end());\n        int64_t min_a = *min_element(nums.begin(),nums.end());\n        int64_t sum = accumulate(nums.begin(),nums.end(),0LL);\n\n        int64_t best_cost = 4e18;\n\n        for( int64_t eq = max_a ; eq <= 2 * max_a ; eq++ ){\n\n           int64_t total_increements = eq * n - sum;\n           int64_t cost = 0;\n           int64_t min_a_add = eq - min_a;\n\n           // operations needed to make all others equal < operations needed to make min_a equal \n           // so min_a can't be paired then so needs cost1 operations\n           \n           if(  eq * (n-1) - (sum-min_a) <= (eq - min_a) ){\n                int64_t extra = (1LL * eq - min_a) - (eq * (n-1) - ( sum - min_a ));\n                cost += 1LL * extra * cost1;\n                total_increements -= extra;\n           }\n\n\n\n            // if odd increements are left then use a cost1 operation\n           if( total_increements & 1 ){\n                total_increements -= 1;\n                cost += cost1;\n           }\n\n           cost += min( total_increements * cost1 , (total_increements / 2) * cost2 );\n           best_cost = min( best_cost , cost );\n\n        }\n        \n        return best_cost%mod;\n    }\n};","compare_resulttitle_slug":"minimum-cost-to-equalize-array","has_notes":false,"flag_type":1}